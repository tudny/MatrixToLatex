
(* matrix type *)
type t

(* make h w a - generates matrix of rational numbers [a] of size [h]x[w]  *)
val make : int -> int -> Rational.t -> t

(* init h w f -
   generates matrix of ratinal numbers generated by f of size [w]x[h] *)
val init : int-> int -> (int -> int -> Rational.t) -> t

(* get m (x, y) - returns value at (x, y) *)
val get : t -> (int * int) -> Rational.t

(* set m (x, y) - sets value at (x, y) *)
val set : t -> (int * int) -> Rational.t -> unit

(* copies matrix *)
val copy : t -> t

(* adds two matrixes *)
val (+!) : t -> t -> t

(* multiplies matrix by scalar *)
val ( *^ ) : t -> Rational.t -> t

(* multiplies two matrixes *)
val ( *! ) : t -> t -> t

(* prints matrix to the stdio *)
val print_matrix : t -> unit

val of_file : string -> t
